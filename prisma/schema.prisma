generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String?        // Make password optional for OAuth users
  role          Role          @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activities    UserActivity[]
  bookmarks     Bookmark[]
  accounts      Account[]      // Add this relation
  sessions      Session[]      // Add this relation
  questionPapers QuestionPaper[]
}

model Question {
  id            String         @id @default(cuid())
  questionText  String
  options       String         // JSON string of options array
  correctAnswer Int           // Index of correct answer (0-3)
  explanation   String?
  category      String
  subCategory   String
  difficulty    Difficulty     @default(MEDIUM)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activities    UserActivity[]
  bookmarks     Bookmark[]
}

model UserActivity {
  id          String    @id @default(cuid())
  userId      String
  questionId  String
  isCorrect   Boolean
  timeTaken   Int       // Time taken in seconds
  attemptedAt DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id])
}

model Bookmark {
  id          String    @id @default(cuid())
  userId      String
  questionId  String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  status    ContactStatus @default(PENDING)
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ContactStatus {
  PENDING
  RESPONDED
  ARCHIVED
}

enum ExamType {
  NEET
  JEE
  GATE
}

model QuestionPaper {
  id        String   @id @default(cuid())
  examType  ExamType
  year      Int
  pdfUrl    String
  title     String
  isPractice Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uploadedBy User     @relation(fields: [userId], references: [id])
  userId    String
}